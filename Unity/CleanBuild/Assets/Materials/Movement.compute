#pragma kernel CSMain

struct MeshProperties {
    float4x4 mat;
    float3 sphereCoord;
    float4 color;
};

RWStructuredBuffer<MeshProperties> _Properties;
float4 _earthPos;

// We used to just be able to use (1, 1, 1) threads for whatever population (not sure the old limit), but a Unity update
// imposed a thread limit of 65535.  Now, to render populations above that, we need to be more granular with our threads.
[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    float4x4 mat = _Properties[id.x].mat;
    // In a transform matrix, the position (translation) vector is the last column.
    float3 position = float3(mat[0][3], mat[1][3], mat[2][3]);
    //float3 earthPosition = float3(_EarthTransform[0][3], _EarthTransform[1][3], _EarthTransform[2][3]);
    //float dist = distance(position, earthPosition);
    // Scale and reverse distance so that we get a value which fades as it gets further away.
    // Max distance is 5.0.
    //dist = 5.0 - clamp(0.0, 5.0, dist);

    // Get the vector from the pusher to the position, and scale it.
    //float3 push = position - earthPosition;
    // Create a new translation matrix which represents a move in a direction.
    //float4x4 translation = float4x4(
    //    1, 0, 0, _earthPos.x + _Properties[id.x].sphereCoord.x,
    //    0, 1, 0, _earthPos.y + _Properties[id.x].sphereCoord.y,
    //    0, 0, 1, _earthPos.z + _Properties[id.x].sphereCoord.z,
    //    0, 0, 0, 1
    //);
    float3 combo = _earthPos + _Properties[id.x].sphereCoord;
     //Apply translation to existing matrix, which will be read in the shader.
    _Properties[id.x].mat[0][3] = combo.x;
    _Properties[id.x].mat[1][3] = combo.y;
    _Properties[id.x].mat[2][3] = combo.z;
    
    //_Properties[id.x].mat = translation;

    /* Just for demo gif.  Not actually very useful -- need to inverse rotation first.
    float4x4 rotation = float4x4(
        .999, -.01, 0, 0.1,
        .01, .999, 0, 0.1,
        0, 0, 1, 0.1,
        0, 0, 0, 1
    );
    _Properties[id.x].mat = mul(_Properties[id.x].mat, rotation);
    */
}
